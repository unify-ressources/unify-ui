<script is:inline>
    const docEl = document.documentElement;
    const getThemePreference = () => {
        if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
        ) {
            return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light";
    };

    const getThemePalette = () => {
        if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("palette")
        ) {
            return localStorage.getItem("palette");
        }
        return "default";
    };

    const applyTheme = () => {
        const isDark = getThemePreference() === "dark";
        const palette = getThemePalette();
        docEl.classList[isDark ? "add" : "remove"]("dark");
        docEl.setAttribute("data-palette", palette);

        
    };

    document.addEventListener("astro:after-swap", applyTheme);
    applyTheme();

    if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
            const isDark = docEl.classList.contains("dark");
            const hasPalette = docEl.getAttribute("data-palette");
            localStorage.setItem("theme", isDark ? "dark" : "light");
            localStorage.setItem(
                "palette",
                hasPalette ? hasPalette : "default",
            );
        });
        observer.observe(docEl, {
            attributes: true,
            attributeFilter: ["class", "data-palette"],
        });
    }
    
</script>
